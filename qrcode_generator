Dim mat() As Byte                           ' matrix of QR
 Sub C_00_Click()
   Dim lev As Byte
    
    linfim = Cells(1048576, 1).End(xlUp).Row
    
    For lin = 2 To linfim
    
    Caption = Range("a" & lin).Value
    txt = Caption
    
    
    version = 0
    l = Len(txt)
    w = l * 8
    p = Array(8, 16, 16)                                                                 ' error correction words L,M,Q,H and blocks
    
    ecw = Array(Array(2, 5, 6, 8, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30), _
        Array(99, 6, 8, 10, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28), _
        Array(99, 99, 99, 14, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30), _
        Array(99, 99, 99, 99, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30))
    ecb = Array(Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25), _
        Array(1, 1, 1, 1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49), _
        Array(1, 1, 1, 1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68), _
        Array(1, 1, 1, 1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81))

    Do                                                                                                ' compute QR size
        version = version + 1
        If version + 3 > UBound(ecb(0)) Then Exit Sub
        
        s = version * 4 + 17                                                                 ' symbol size
        j = ecb(lev)(version + 3) * ecw(lev)(version + 3)                     ' error correction
        a = IIf(version < 2, 0, version \ 7 + 2)                                      ' # of align pattern
        
        el = (s - 1) * (s - 1) - (5 * a - 1) * (5 * a - 1)                            ' total bits - align - timing
        el = el - IIf(version < 2, 191, IIf(version < 7, 136, 172))           ' finder, version, format
        k = p((version + 7) \ 17)                                                            ' count indicator bits
    Loop While (el And -8) - 8 * j < w + 4 + k

    For lev = lev To 2                                                                          ' increase security level if data still fits
        j = ecb(lev + 1)(version + 3) * ecw(lev + 1)(version + 3)
        If (el And -8) - 8 * j < w + 4 + k Then Exit For
    Next
    
    blk = ecb(lev)(version + 3)         ' # of error correction blocks
    ec = ecw(lev)(version + 3)         ' # of error correction bytes
    el = el \ 8 - ec * blk                    '    data capacity
    w = el \ blk                                 ' # of words in group 1
    b = blk + w * blk - el                  ' # of blocks in group 1

    ReDim enc(el + ec * blk) As Byte, mat(s - 1, s - 1) As Byte
    
    c = 0                                                               ' encode head indicator bits
    eb = 4 + k
    v = 4 * 2 ^ k + l                                    ' character count indicator
    
    For i = 1 To l                                                      ' encode data
        v = v * 256 + Asc(Mid(txt, i, 1))
        eb = eb + 8
        For eb = eb To 8 Step -8                                ' add data to bit stream
            j = 2 ^ (eb - 8)
            enc(c) = v \ j
            v = v - enc(c) * j
            c = c + 1
        Next
    Next
    
    If el > c Then
        v = v * 16
        eb = eb + 4                                                         ' terminator
    End If
    
    enc(c) = (v * 256) \ 2 ^ eb
    c = c + 1
    enc(c) = ((v * 65536) \ 2 ^ eb) And 255
    If eb > 8 And el >= c Then c = c + 1                                            ' bit padding
    If (version And -3) = -3 And el = c Then enc(c) = enc(c) \ 16       ' M1,M3: shift high bits to low nibble
    
    i = 236
    For c = c To el - 1                                                                         ' byte padding
        enc(c) = IIf((version And -3) = -3 And c = el - 1, 0, i)
        i = i Xor 236 Xor 17
    Next c
    
    ReDim rs(ec + 1) As Integer                                                         ' compute Reed Solomon error detection and correction
    Dim lg(256) As Integer, ex(255) As Integer                                  ' log/exp table
    j = 1
    For i = 0 To 254
        ex(i) = j
        lg(j) = i                                                                                ' compute log/exp table of Galois field
        j = j + j
        If j > 255 Then j = j Xor 285                                                ' GF polynomial a^8+a^4+a^3+a^2+1 = 100011101b = 285
    Next i
    
    rs(0) = 1                                                                                       ' compute RS generator polynomial
    For i = 0 To ec - 1
        rs(i + 1) = 0
        For j = i + 1 To 1 Step -1
            rs(j) = rs(j) Xor ex((lg(rs(j - 1)) + i) Mod 255)
        Next j
    Next i
    
    eb = el: k = 0
    For c = 1 To blk                                                                            ' compute RS correction data for each block
        For i = IIf(c <= b, 1, 0) To w
            X = enc(eb) Xor enc(k)
            For j = 1 To ec
                enc(eb + j - 1) = enc(eb + j) Xor IIf(X, ex((lg(rs(j)) + lg(X)) Mod 255), 0)
            Next j
            k = k + 1
        Next i
        eb = eb + ec
    Next c
                                                                                                        ' fill QR matrix
    For i = 8 To s - 1                                                                          ' timing pattern
        mat(i, 6) = i And 1 Xor 3
        mat(6, i) = i And 1 Xor 3
    Next i
    
    If version > 6 Then                                                                         ' reserve version area
        For i = 0 To 17
            mat(i \ 3, s - 11 + i Mod 3) = 2
            mat(s - 11 + i Mod 3, i \ 3) = 2
        Next i
    End If
    
    If a < 2 Then a = 2
    For X = 1 To a                                                                                  ' layout finder/align pattern
        For Y = 1 To a
            If X = 1 And Y = 1 Then                                                             ' finder upper left
                i = 0
                j = 0
                p = Array(383, 321, 349, 349, 349, 321, 383, 256, 511)
            ElseIf X = 1 And Y = a Then                                                         ' finder lower left
                i = 0
                j = s - 8
                p = Array(256, 383, 321, 349, 349, 349, 321, 383)
            ElseIf X = a And Y = 1 Then                                                         ' finder upper right
                i = s - 8
                j = 0
                p = Array(254, 130, 186, 186, 186, 130, 254, 0, 255)
            Else                                                                                            ' alignment grid
                c = 2 * Int(2 * (version + 1) / (1 - a))                                    ' pattern spacing
                i = IIf(X = 1, 4, s - 9 + c * (a - X))
                j = IIf(Y = 1, 4, s - 9 + c * (a - Y))
                p = Array(31, 17, 21, 17, 31)                                               ' alignment pattern
            End If
            
            If version <> 1 Or X + Y < 4 Then                                               ' no align pattern for version 1
                For c = 0 To UBound(p)                                                          ' set fixed pattern, reserve space
                    m = p(c)
                    k = 0
                    Do
                        mat(i + k, j + c) = (m And 1) Or 2
                        m = m \ 2
                        k = k + 1
                    Loop While 2 ^ k <= p(0)
                Next c
            End If
        Next Y
    Next X
    
    X = s
    Y = s - 1                                                                                               ' layout codewords
    For i = 0 To eb - 1
        c = 0
        k = 0
        j = w + 1                                                                                           ' interleave data
        If i >= el Then
            c = el
            k = el
            j = ec                                                                                              ' interleave checkwords
        ElseIf i + blk - b >= el Then
            c = -b
            k = c                                                                                                   ' interleave group 2 last bytes
        ElseIf (i Mod blk) >= b Then
            c = -b                                                                                                  ' interleave group 2
        Else
            j = j - 1                                                                                                ' interleave group 1
        End If
        c = enc(c + ((i - k) Mod blk) * j + (i - k) \ blk)                                           ' interleave data
        
        For j = IIf((-3 And version) = -3 And i = el - 1, 3, 7) To 0 Step -1            ' M1,M3: 4 bit
            k = IIf(version > 0 And X < 6, 1, 0)                                                    ' skip vertical timing pattern
            Do                                                                                                      ' advance x,y
                X = X - 1
                If 1 And (X + 1) Xor k Then
                    If s - X - k And 2 Then
                        If Y > 0 Then Y = Y - 1: X = X + 2                                              ' up, top turn
                    Else
                        If Y < s - 1 Then Y = Y + 1: X = X + 2                                          ' down, bottom turn
                    End If
                End If
            Loop While mat(X, Y) And 2                                                                  ' skip reserved area
            If c And 2 ^ j Then mat(X, Y) = 1
        Next j
    Next i

    m = 0
    p = 1000000                                                                             ' data masking
    For k = 0 To 7
        l = 0
        k2 = ""
        j = 0
        For Y = 0 To s - 1                                                                  ' horizontal
            c = 0
            i = 0
            k1 = "0000"
            For X = 0 To s - 1
                w = getPattern(X, Y, k, version)
                l = l + w
                k1 = k1 & w                                                              ' rule 4: count darks
                If c = w Then                                                               ' same as prev
                    i = i + 1
                    If X And Mid(k2, X + 4, 2) = c & c Then j = j + 3       ' rule 2: block 2x2
                Else
                    If i > 5 Then j = j + i - 2                                             ' rule 1: >5 adjacent
                    c = 1 - c
                    i = 1
                End If
            Next X
            If i > 5 Then j = j + i - 2                                                     ' rule 1: >5 adjacent
            
            i = 0
            Do                                                                                      ' rule 3: like finder pattern
                i = InStr(i + 4, k1, "1011101")
                If i < 1 Then Exit Do
                If Mid(k1, i - 4, 4) = "0000" Or Mid(k1 & "0000", i + 7, 4) = "0000" Then j = j + 40
            Loop
            k2 = k1                                                                                 ' rule 2: remember last line
        Next Y
            
        For X = 0 To s - 1                                                                  ' vertical
            c = 0
            i = 0
            k1 = "0000"
            For Y = 0 To s - 1
                w = getPattern(X, Y, k, version)
                k1 = k1 & w                                                                 ' vertical to string
                If c = w Then                                                                 ' same as prev
                    i = i + 1
                Else
                    If i > 5 Then j = j + i - 2                                             ' rule 1: >5 adjacent
                    c = 1 - c: i = 1
                End If
            Next Y
            If i > 5 Then j = j + i - 2                                                       ' rule 1: >5 adjacent
            
            i = 0
            Do                                                                                      ' rule 3: like finder pattern
                i = InStr(i + 4, k1, "1011101")
                If i < 1 Then Exit Do
                If Mid(k1, i - 4, 4) = "0000" Or Mid(k1 & "0000", i + 7, 4) = "0000" Then j = j + 40
            Loop
        Next X
        j = j + Int(Abs(10 - 20 * l / (s * s))) * 10                                ' rule 4: darks
        
        If j < p Then
            p = j
            m = k
        End If                                                                                      ' take mask of lower penalty
    Next k
                                                                                                      ' add format information, code level and mask
    j = IIf(version = -3, m, ((5 - lev) And 3) * 8 + m)
    j = j * 1024
    k = j
    For i = 4 To 0 Step -1                                                          ' BCH error correction: 5 data, 10 error bits
        If j >= 1024 * 2 ^ i Then j = j Xor 1335 * 2 ^ i
    Next i                                                                                  ' generator polynom: x^10+x^8+x^5+x^4+x^2+x+1 = 10100110111b = 1335
    
    k = k Xor j Xor 21522                                                         ' XOR masking
    For j = 0 To 14                                                                                 ' layout format information
        mat(IIf(j < 8, s - j - 1, IIf(j = 8, 7, 14 - j)), 8) = k And 1 Xor 2    ' QR horizontal
        mat(8, IIf(j < 6, j, IIf(j < 8, j + 1, s + j - 15))) = k And 1 Xor 2    ' vertical
        k = k \ 2
    Next

    If version > 6 Then                                                         ' add version information
        k = version * 4096&
        For i = 5 To 0 Step -1                                                  ' BCH error correction: 6 data, 12 error bits
            If k >= 4096 * 2 ^ i Then k = k Xor 7973 * 2 ^ i
        Next
                                                                                            ' generator polynom: x^12+x^11+x^10+x^9+x^8+x^5+x^2+1 = 1111100100101b = 7973
        k = k Xor (version * 4096&)
        For j = 0 To 17                                                             ' layout version information
            mat(j \ 3, s + j Mod 3 - 11) = k And 1 Xor 2
            mat(s + j Mod 3 - 11, j \ 3) = k And 1 Xor 2
            k = k \ 2
        Next
    End If

    ReDim qr(178, 178) As Integer
    For Y = 0 To s - 1
        For X = 0 To s - 1
             qr(Y + 1, X + 1) = getPattern(X, Y, m, version)
        Next X
    Next Y
    
    With CreateObject("excel.application")
       With .Workbooks.Add.Sheets(1)
            With .Range("A1:EP179").FormatConditions.AddColorScale(2)
                For j = 1 To 2
                    With .ColorScaleCriteria(j)
                             .Type = 0
                             .Value = j - 1
                            .FormatColor.ThemeColor = j
                    End With
                Next
            End With
            With .Range("A1:EP179")
                 .NumberFormat = ";;;"
                 .Value = qr
            End With
            With .Cells(1).Resize(s + 2, s + 2)
                .ColumnWidth = 0.46
                .RowHeight = 4
                .CopyPicture
                n = .Height
            End With
            caminho = ActiveWorkbook.Path
            c00 = ActiveWorkbook.Path & "\QR_" & Replace(Replace(Replace(txt, "/", "_"), ":", ""), "?", "") & ".gif"
           With .ChartObjects.Add(1, 100, n, n).Chart
                .Paste
                .Export c00
           End With
           .Parent.Close 0
      End With
      .Quit
    End With
    
    Range("B" & lin).PasteSpecial
     
     'LoadPicture (c00)
     
     Application.ScreenUpdating = False
     
Next
    
End Sub

Function getPattern(ByVal X As Long, ByVal Y As Long, ByVal m As Integer, ByVal version As Integer) As Integer
    Dim i As Integer, j As Long
    i = mat(X, Y)
    If i < 2 Then
        Select Case m
            Case 0: j = (X + Y) And 1
            Case 1: j = Y And 1
            Case 2: j = X Mod 3
            Case 3: j = (X + Y) Mod 3
            Case 4: j = (X \ 3 + Y \ 2) And 1
            Case 5: j = ((X * Y) And 1) + (X * Y) Mod 3
            Case 6: j = (X * Y + (X * Y) Mod 3) And 1
            Case 7: j = (X + Y + (X * Y) Mod 3) And 1
        End Select
        If j = 0 Then i = i Xor 1 ' invert only data according mask
    End If
    
    getPattern = i And 1
End Function



